<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
					xmlns:System="clr-namespace:System;assembly=mscorlib"
					xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
					xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <Style x:Key="SliderStyle2" TargetType="Slider" BasedOn="{StaticResource MaterialDesignSlider}">

    </Style>
    <Style x:Key="LabelStyle" TargetType="{x:Type Label}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="FontSize" Value="26"/>
        <Setter Property="Margin" Value="0,10,0,0"/>
    </Style>
    <Style  x:Key="RoundCornerTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation"
          Value="None" />
        <Setter Property="FocusVisualStyle"
          Value="{x:Null}" />
        <Setter Property="MinWidth"
          Value="180" />
        <Setter Property="MaxLength"
          Value="100" />
        <Setter Property="MinHeight"
          Value="40" />
        <Setter Property="MaxWidth"
          Value="500" />
        <Setter Property="TextAlignment"
          Value="Center" />
        <Setter Property="HorizontalAlignment"
          Value="Center" />
        <Setter Property="MaxHeight"
          Value="100" />
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="VerticalAlignment"
          Value="Top" />
        <Setter Property="VerticalContentAlignment"
          Value="Center" />
        <Setter Property="FontSize"
          Value="22" />
        <Setter Property="TextWrapping"
          Value="Wrap" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border"
                CornerRadius="2"
                Padding="2"
                BorderThickness="1">
                        <Border.Background>
                            <SolidColorBrush Color="Gray" />
                        </Border.Background>
                        <Border.BorderBrush>
                            <SolidColorBrush Color="#0767b3" />
                        </Border.BorderBrush>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">

                                </VisualState>
                                <VisualState x:Name="ReadOnly">

                                </VisualState>
                                <VisualState x:Name="MouseOver" >
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ScrollViewer Margin="0"
                        x:Name="PART_ContentHost" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RoundCornerMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="Margin" Value="5,5,5,5"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="white"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid x:Name="grid">
                        <Border x:Name="border" CornerRadius="6" BorderBrush="Black" BorderThickness="2">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                                    <GradientStop Color="#FFA4A4A4" Offset="5"/>
                                    <GradientStop Color="#0767b3" Offset="0"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          TextElement.FontWeight="Bold">
                            </ContentPresenter>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                                        <GradientStop Color="#0767b3" Offset="0"/>
                                        <GradientStop Color="Black" Offset="2"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#0767b3"/>
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="FontSize" Value="10"/>
                            <Setter Property="Visibility" Value="Visible"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RoundCorner" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid">
                        <Border x:Name="border" CornerRadius="6" BorderBrush="Black" BorderThickness="2">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                                    <GradientStop Color="#FFA4A4A4" Offset="5"/>
                                    <GradientStop Color="#0767b3" Offset="0"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          TextElement.FontWeight="Bold">
                            </ContentPresenter>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                                        <GradientStop Color="#0767b3" Offset="0"/>
                                        <GradientStop Color="Black" Offset="2"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#0767b3"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AppButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Background" Value="#FF272727"/>
        <Setter Property="Foreground" >
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                    <GradientStop Color="#FFA4A4A4" Offset="0"/>
                    <GradientStop Color="White" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border CornerRadius="5" BorderThickness="1" Padding="2">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="MaterialDesignFlatToggleButton2" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignToolForeground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="Width" Value="56"/>
        <Setter Property="Height" Value="56"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid ClipToBounds="True" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale" To="1.0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale" To="1.0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale" To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale" To="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Ellipse Fill="Transparent" x:Name="HoverEllipse" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="2" />
                        <Ellipse Fill="{TemplateBinding BorderBrush}" x:Name="CheckedEllipse" RenderTransformOrigin="0.5, 0.5">
                            <Ellipse.RenderTransform>
                                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.0" ScaleY="1.0" x:Name="CheckedEllipseScale"/>
                            </Ellipse.RenderTransform>
                        </Ellipse>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="StrokeThickness" TargetName="HoverEllipse" Value="3"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="MetroKeyboardNormalKey" TargetType="Button" BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <Setter Property="FontSize" Value="62"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="MinHeight" Value="60"/>
        <Setter Property="MinWidth" Value="60"/>
        <Setter Property="MaxHeight" Value="Infinity"/>
        <Setter Property="MaxWidth" Value="Infinity"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Margin" Value="1"/>


    </Style>
    <Style x:Key="MetroKeyboardSpecialKey" TargetType="Button" BasedOn="{StaticResource MaterialDesignRaisedDarkButton}">
        <Setter Property="FontSize" Value="62"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="MinHeight" Value="60"/>
        <Setter Property="MinWidth" Value="60"/>
        <Setter Property="MaxHeight" Value="Infinity"/>
        <Setter Property="MaxWidth" Value="Infinity"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Margin" Value="1"/>
    </Style>
    <Style x:Key="MetroTextBoxDialog" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignTextBox}">
        <Setter Property="FontSize" Value="62"/>
        <Setter Property="FontWeight" Value="Black"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>
    <Style  x:Key="MainMenuButton" TargetType="Button" BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <Setter Property="Height" Value="100"/>
        <Setter Property="Width" Value="400"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Style.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="FontSize" Value="36"/>
                <Setter Property="TextAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
                <Setter Property="MaxWidth" Value="300"/>
            </Style>
            <Style TargetType="Viewbox">
                <Setter Property="Stretch" Value="Uniform"/>
                <Setter Property="StretchDirection" Value="DownOnly"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
            </Style>
            <Style TargetType="StackPanel">
                <Setter Property="Orientation" Value="Horizontal"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>

            </Style>
        </Style.Resources>
    </Style>
    <Style x:Key="ToogleButtonFlatAsButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="#616161"/>
        <Setter Property="Background" Value="#e0e0e0"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid ClipToBounds="True" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale" To="1.0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale" To="1.0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale" To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale" To="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Fill="Transparent" x:Name="HoverEllipse" Stroke="Transparent" StrokeThickness="1" />
                        <Rectangle Fill="{TemplateBinding Background}" x:Name="CheckedEllipse" RenderTransformOrigin="0.5, 0.5">
                            <Rectangle.RenderTransform>
                                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.0" ScaleY="1.0" x:Name="CheckedEllipseScale"/>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="HoverEllipse" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                        </Trigger>
                        <!-- TODO
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="BorderBrush" TargetName="normal" Value="{Binding (Custom:ControlsHelper.FocusBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <DataTemplate x:Key="MenuItemTemplate" DataType="{x:Type metro:HamburgerMenuGlyphItem}">
        <Grid Height="48">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="48" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0"
							   FontSize="16"
							   HorizontalAlignment="Center"
							   VerticalAlignment="Center"
							   FontFamily="Segoe MDL2 Assets"
							   Foreground="White"
							   Text="{Binding Glyph}" />
            <TextBlock Grid.Column="1"
							   VerticalAlignment="Center"
							   FontSize="16"
							   Foreground="White"
							   Text="{Binding Label}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="OptionsMenuItemTemplate" DataType="{x:Type metro:HamburgerMenuGlyphItem}">
        <Grid Height="48">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="48" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0"
							   FontSize="16"
							   HorizontalAlignment="Center"
							   VerticalAlignment="Center"
							   FontFamily="Segoe MDL2 Assets"
							   Foreground="White"
							   Text="{Binding Glyph}" />
            <TextBlock Grid.Column="1"
							   VerticalAlignment="Center"
							   FontSize="16"
							   Foreground="White"
							   Text="{Binding Label}" />
        </Grid>
    </DataTemplate>

    <sys:Double x:Key="HamburgerMenuCollapsWidth">60</sys:Double>
    <GridLength x:Key="HamburgetMenuIconWidth">60</GridLength>


    <SolidColorBrush x:Key="KeyCrocodileGreenBrush" Color="#FF4CC01B"/>
    <SolidColorBrush x:Key="KeyCrocodileRedBrush" Color="#FFd11e1e"/>
    <SolidColorBrush x:Key="ValidationErrorColor" Color="Red" />
    <SolidColorBrush x:Key="StopColorBrush" Color="Red" />



    <Style x:Key="ResistansListViewStyle" TargetType="{x:Type ListView}">
        <!--<Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />-->
        <Setter Property="Background" Value="{DynamicResource MaterialDesignCardBackground }"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border Name="Border" BorderThickness="1" Margin="0" BorderBrush="{DynamicResource MaterialDesignCardBackground}"
							Background="{DynamicResource MaterialDesignCardBackground }">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <GridViewHeaderRowPresenter 
								Name="Header"
								ScrollViewer.CanContentScroll="False"
								Columns="{Binding Path=View.Columns,RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
								Grid.Row="0" Grid.Column="0" VerticalAlignment="Stretch"
								Margin="0,0,0,0" HorizontalAlignment="Stretch"                                
								ColumnHeaderContainerStyle="{Binding Path=View.ColumnHeaderContainerStyle,RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
								ColumnHeaderTemplate="{Binding Path=View.ColumnHeaderTemplate,RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
								ColumnHeaderTemplateSelector="{Binding Path=View.ColumnHeaderTemplateSelector,RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
								AllowsColumnReorder="False"
								ColumnHeaderContextMenu="{Binding Path=View.ColumnHeaderContextMenu,RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
								ColumnHeaderToolTip="{Binding Path=View.ColumnHeaderToolTip,RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
								/>
                            <ItemsPresenter Grid.Row="1" Grid.Column="0" VerticalAlignment="Stretch"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"  Value="false">
                            <Setter Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ResistansHeaderListViewStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Padding" Value="0" />
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="Margin" Value="0,0,-2,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignCardBackground }"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource MaterialDesignCardBackground }"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Border x:Name="HeaderBorder"
										Padding="0"
										BorderThickness="0"
										Margin="0"
										BorderBrush="Blue"
										Background="{DynamicResource MaterialDesignCardBackground }">
                        <TextBlock x:Name="ContentHeader"
											Margin="5"
											HorizontalAlignment="Center"
											VerticalAlignment="Center"
											Text="{TemplateBinding Content}"                                                                
											TextBlock.FontSize="{TemplateBinding FontSize}"
											TextBlock.FontWeight="Bold"
											Width="{TemplateBinding Width}" 
											TextAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="ResistansListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="TextBlock.FontSize" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border" 
							Padding="5"
							Background="{TemplateBinding Background}"
							BorderBrush="{DynamicResource MaterialDesignDivider}"
							BorderThickness="0,0,0,1"
							SnapsToDevicePixels="True"
							>
                        <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignSelection}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignDivider}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource MaterialDesignSelection}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
            </MultiTrigger>

            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignDivider}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FoudDeviceListViewStyle" TargetType="{x:Type ListView}" BasedOn="{StaticResource MaterialDesignListView}">
        <!--<Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}" />-->
        <Setter Property="Background" Value="{DynamicResource MaterialDesignCardBackground }"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style x:Key="FoundDeviceHeaderListViewStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Visibility" Value="Collapsed" />
    </Style>

    <Style x:Key="FoundDeviceListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource MaterialDesignGridViewItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="TextBlock.FontSize" Value="20"/>
        <Setter Property="Foreground" Value="White"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignSelection}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignDivider}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource MaterialDesignSelection}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value=".56" />
            </Trigger>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignDivider}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="SizableToogleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MaterialDesignSwitchToggleButton}">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Viewbox Margin="5">
                        <ToggleButton IsChecked="{Binding Path=IsChecked,RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}}"/>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="radioButtonSetting" TargetType="RadioButton" BasedOn="{StaticResource MaterialDesignRadioButton}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="20"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="labelSetting" TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignHeadline1TextBlock}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="20"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="checkBoxSettings" TargetType="CheckBox" BasedOn="{StaticResource MaterialDesignCheckBox}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="20"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="labelColumnCell" TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignHeadline1TextBlock}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="20"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="labelColumnCellBig" TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignHeadline1TextBlock}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="27"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCellBigFont" TargetType="DataGridCell" BasedOn="{StaticResource MaterialDesignDataGridCell}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="FontSize" Value="27"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    </Style>

    <Style x:Key="DataGridCellSmallFont" TargetType="DataGridCell" BasedOn="{StaticResource DataGridCellBigFont}">
        <Setter Property="FontSize" Value="18"/>
    </Style>

    <Style x:Key="bigLabelStyle" TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignHeadline1TextBlock}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="32"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="textBoxSetting" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignTextBox}">
        <Setter Property="Margin" Value="5,5,5,15"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="MinWidth" Value="200"/>
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource MaterialDesignDarkForeground}"/>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="datePickerSetting" TargetType="DatePicker" BasedOn="{StaticResource MaterialDesignDatePicker}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="MinWidth" Value="200"/>
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Style.Resources>
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignRaisedButton}">
                <Setter Property="Height" Value="60"/>
                <Setter Property="Width" Value="60"/>
                <Setter Property="Margin" Value="5"/>
            </Style>
        </Style.Resources>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="passwordBoxSetting" TargetType="PasswordBox" BasedOn="{StaticResource MaterialDesignPasswordBox}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="MinWidth" Value="200"/>
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="PasswordChar" Value="●"/>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="comboBoxSetting" TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignComboBox}">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="MinWidth" Value="150"/>
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="RangeSliderControlTemplate1" TargetType="{x:Type metro:RangeSlider}">
        <StackPanel x:Name="PART_Container" HorizontalAlignment="Stretch" Orientation="Vertical" VerticalAlignment="Center">
            <TickBar x:Name="PART_TopTick" Fill="{TemplateBinding Foreground}" 
					 Height="4" 
					 Maximum="{TemplateBinding Maximum}" 
					 Margin="5,0,5,2" Minimum="{TemplateBinding Minimum}" 
					 Placement="Top" TickFrequency="{TemplateBinding TickFrequency}" 
					 Visibility="Collapsed"/>
            <StackPanel x:Name="PART_RangeSliderContainer" 
						Background="Transparent" HorizontalAlignment="Stretch" Orientation="Horizontal" VerticalAlignment="Center">
                <RepeatButton x:Name="PART_LeftEdge"/>
                <Thumb x:Name="PART_LeftThumb" 
					   Cursor="Arrow"
					   Height="{TemplateBinding Height}" 
					   Style="{DynamicResource MahApps.Styles.Thumb.Slider.Win10}" 
					   Background="{DynamicResource MahApps.Brushes.Accent}"
					   Width="{TemplateBinding Height}"
					   Margin="1"/>
                <Thumb x:Name="PART_MiddleThumb" Cursor="Hand" MinWidth="{TemplateBinding MinRangeWidth}">
                    <Thumb.Style>
                        <Style TargetType="{x:Type Thumb}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Border Background="{DynamicResource MahApps.Brushes.Accent}" 
												   Height="{Binding PART_LeftEdge.Height}" 
												   Margin="1,6,1,6" 
												   CornerRadius="4"
												   />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Thumb.Style>
                </Thumb>
                <Thumb x:Name="PART_RightThumb" 
					   Cursor="Arrow" 
					   Height="{TemplateBinding Height}" 
					   Style="{DynamicResource MahApps.Styles.Thumb.Slider.Win10}" 
					   Background="{DynamicResource MahApps.Brushes.Accent}"
					   Width="{TemplateBinding Height}"
					   Margin="1"/>
                <RepeatButton x:Name="PART_RightEdge" Margin="1,0,0,0"/>
            </StackPanel>
            <TickBar x:Name="PART_BottomTick" 
					 Fill="{TemplateBinding Foreground}" 
					 Height="4" Maximum="{TemplateBinding Maximum}" 
					 Margin="5,2,5,0" Minimum="{TemplateBinding Minimum}" 
					 Placement="Top" TickFrequency="{TemplateBinding TickFrequency}" Visibility="Collapsed"/>
        </StackPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="PART_TopTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="PART_BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="PART_BottomTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="PART_TopTick" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <Setter Property="MinHeight" Value="60"/>
        <Setter Property="MinWidth" Value="60"/>
        <Setter Property="Margin" Value="5,10,5,10"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>


    <Style x:Key="DatePickerCalendarStyle" TargetType="{x:Type Calendar}">
        <Setter Property="Background" Value="{DynamicResource MaterialDesignCardBackground}"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="CalendarButtonStyle" Value="{DynamicResource CalendarButtonStyleDefinition}"/>
        <Setter Property="CalendarDayButtonStyle" Value="{DynamicResource DayButtonStyle}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}"/>
        <Setter Property="CalendarItemStyle" Value="{DynamicResource CalendarItemsStyle}"/>
    </Style>
    <Style x:Key="CalendarButtonStyleDefinition" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="MinHeight" Value="100"/>
        <Setter Property="Foreground" Value="{StaticResource MaterialDesignDarkForeground}"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Margin" Value="2"/>
    </Style>
    <Style x:Key="DayButtonStyle" TargetType="CalendarDayButton" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Foreground" Value="{StaticResource MaterialDesignDarkForeground}"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="MinHeight" Value="60"/>
        <Setter Property="MinWidth" Value="60"/>
        <Style.Triggers>
            <Trigger Property="IsToday" Value="True">
                <Setter Property="FontWeight" Value="ExtraBlack"></Setter>
                <Setter Property="FontSize" Value="24"></Setter>
                <Setter Property="Background" Value="{StaticResource MaterialDesignSelection}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CalendarItemsStyle" TargetType="{x:Type CalendarItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarItem}">
                    <ControlTemplate.Resources>
                        <!--week head style-->
                        <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                            <TextBlock Text="{Binding}" 
									   Style="{StaticResource labelSetting}"
									   
									   HorizontalAlignment="Center" 
									   VerticalAlignment="Center" Margin="0,6,0,6" Opacity="0.8" />
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" 
								BorderThickness="1" 
								Background="{TemplateBinding Background}" 
								Margin="{TemplateBinding Margin}">
                            <Grid Margin="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <!--Header-->
                                <Grid Grid.Row="0" HorizontalAlignment="Stretch" 
									  Background="Transparent">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Button  x:Name="PART_PreviousButton"  
											 Focusable="False" 
											 Grid.Column="0"  
											 Content="{DynamicResource Back}"  />
                                    <Button  x:Name="PART_HeaderButton"  
											 Focusable="False" Grid.Column="1" />
                                    <Button  x:Name="PART_NextButton"  
											 Focusable="False" Grid.Column="2" 
											 Content="{DynamicResource Next}" />
                                </Grid>
                                <!--PART_MonthView-->
                                <Grid x:Name="PART_MonthView" 
									  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
									  Margin="6,1,6,6" Grid.Row="1" Visibility="Visible">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                </Grid>
                                <!--PART_YearView-->
                                <Grid x:Name="PART_YearView" 
									  HorizontalAlignment="Stretch" 
									  VerticalAlignment="Stretch" 
									  Margin="6,10,6,10" 
									  Grid.Row="1" Visibility="Hidden">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="PART_Root" Value="0.5" />
                        </Trigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
                        </DataTrigger>
                        <!-- Decade United States n ten, ten-year; X. -->
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DatePickerTextBoxStyle" TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <TextBox x:Name="PART_TextBox" 
							 Text="{Binding Path=Text, RelativeSource={RelativeSource AncestorType={x:Type DatePickerTextBox}}}" 
							 VerticalContentAlignment="Center"
							 HorizontalContentAlignment="Right"
							 HorizontalAlignment="Stretch"
							 Style="{StaticResource textBoxSetting}"
							 />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DatePickerStyleNew2" TargetType="{x:Type DatePicker}">
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="Padding" Value="2" />
        <Setter Property="Margin" Value="5"/>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="CalendarStyle" Value="{DynamicResource DatePickerCalendarStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
							BorderThickness="{TemplateBinding BorderThickness}" 
							Background="{TemplateBinding Background}"
							Padding="{TemplateBinding Padding}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="PART_Root" 
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_Button" 
									Grid.Column="1" Grid.Row="0" 
									Focusable="False" HorizontalAlignment="Left" Margin="3,0,0,0"                                    
									VerticalAlignment="Stretch"
									MinHeight="60"
									Style="{DynamicResource ButtonPanel}">
                                <Path Data="M21.877014,13.337001L22.737,13.337001 22.737,24.258995 21.402008,24.258995 21.402008,15.749004C21.080017,16.055002 20.659027,16.361994 20.137024,16.669001 19.615021,16.975001 19.146027,17.206003 18.731018,17.359003L18.731018,16.068003C19.47702,15.715999 20.131012,15.290996 20.689026,14.792003 21.248016,14.292003 21.644012,13.807002 21.877014,13.337001z M12.669006,13.337001C13.262024,13.337001 13.809021,13.464 14.308014,13.719005 14.808014,13.973994 15.190002,14.322002 15.455017,14.762004 15.719025,15.202007 15.85202,15.669002 15.85202,16.163996 15.85202,16.633997 15.726013,17.062006 15.473022,17.447993 15.221008,17.833002 14.847015,18.139994 14.353027,18.368006 14.996002,18.516001 15.495026,18.824 15.85202,19.290995 16.208008,19.758997 16.386017,20.344004 16.386017,21.045998 16.386017,21.995995 16.040009,22.801003 15.347015,23.460991 14.655029,24.120995 13.779022,24.452004 12.721008,24.452004 11.766022,24.452004 10.973022,24.167 10.343018,23.598 9.7120056,23.029991 9.3520203,22.292 9.2630005,21.387001L10.59903,21.208992C10.752014,21.965996 11.013,22.510994 11.382019,22.844994 11.75,23.178993 12.199005,23.346001 12.728027,23.346001 13.356018,23.346001 13.887024,23.127999 14.320007,22.693001 14.752014,22.258003 14.969025,21.719002 14.969025,21.075997 14.969025,20.462 14.769012,19.956995 14.368011,19.559 13.96701,19.161005 13.458008,18.960993 12.83902,18.960993 12.587006,18.960993 12.27301,19.010996 11.897003,19.109995L12.046021,17.937006C12.13501,17.947001 12.206024,17.952006 12.261017,17.952006 12.830017,17.952006 13.34201,17.803995 13.797028,17.506998 14.252014,17.210001 14.479004,16.751993 14.479004,16.133997 14.479004,15.645 14.313019,15.238994 13.982025,14.917995 13.650024,14.596004 13.223022,14.434993 12.698029,14.434993 12.179016,14.434993 11.746002,14.598994 11.400024,14.924999 11.054016,15.251994 10.831024,15.740993 10.732025,16.394007L9.3970032,16.156992C9.5600281,15.260997 9.9309998,14.568004 10.51001,14.075999 11.088013,13.583995 11.808014,13.337001 12.669006,13.337001z M2.3210144,10.880001L2.3210144,27.323996 29.210022,27.323996 29.210022,10.880001z M0,3.867003L6.401001,3.867003 6.401001,9.0689976 11.735016,9.0689976 11.735016,3.867003 20.800018,3.867003 20.800018,9.0689976 26.134003,9.0689976 26.134003,3.867003 32,3.867003 32,29.469 0,29.469z M22.133026,0L24.801025,0 24.801025,7.734998 22.133026,7.734998z M7.7350159,0L10.402008,0 10.402008,7.734998 7.7350159,7.734998z"
									  Stretch="Uniform"  
									  Fill="{Binding (TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}}" 
									  Margin="5" RenderTransformOrigin="0.5,0.5"
									  />
                            </Button>
                            <DatePickerTextBox x:Name="PART_TextBox" Grid.Column="0" Grid.Row="0"  											   
											   Focusable="{TemplateBinding Focusable}"
											   HorizontalContentAlignment="Stretch"
											   VerticalContentAlignment="Center" 
											   TextAlignment="Right"             
											   BorderThickness="0"
											   Margin="0"
											   Padding="0"                                											   
											   HorizontalAlignment="Stretch"
											   VerticalAlignment="Stretch"  
											   Style="{DynamicResource DatePickerTextBoxStyle}"
											   />


                            <Grid x:Name="PART_DisabledVisual" Grid.ColumnSpan="2" Grid.Column="0" IsHitTestVisible="False" Opacity="0" Grid.Row="0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.Column="0" Fill="#A5FFFFFF" RadiusY="1" Grid.Row="0" RadiusX="1" />
                                <Rectangle Grid.Column="1" Fill="#A5FFFFFF" Height="18" Margin="3,0,3,0" RadiusY="1" Grid.Row="0" RadiusX="1" Width="19" />
                                <Popup x:Name="PART_Popup" 
									   AllowsTransparency="True" 
									   Placement="Absolute" 
									   PlacementTarget="{Binding ElementName=PART_TextBox}" 
									   StaysOpen="False" />
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Opacity" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NumericUpDownSettingsStyleFill" TargetType="metro:NumericUpDown" BasedOn="{StaticResource MaterialDesignNumericUpDown}">
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="UpDownButtonsWidth" Value="45"/>
        <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxBackground}" />
        <Setter Property="Padding" Value="12,8,8,8" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="NumericUpDownSettingsStyle" TargetType="metro:NumericUpDown" BasedOn="{StaticResource MaterialDesignNumericUpDown}">
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="UpDownButtonsWidth" Value="45"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="12,8,8,8" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}" />
            </Trigger>
        </Style.Triggers>

    </Style>

</ResourceDictionary>